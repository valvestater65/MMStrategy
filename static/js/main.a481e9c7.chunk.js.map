{"version":3,"sources":["Components/Calculator/CalculatedStints/calculatedStints.module.css","Components/FormSetup/Compounds/Compound.module.css","Components/FormSetup/RaceData/raceData.module.css","Components/Calculator/CalculatedStrategies/calculatedStrategies.module.css","Components/FormSetup/FormSetup.module.css","Components/Layout/Layout.module.css","Models/CalculatedStint.js","Models/RaceStrategy.js","Components/Calculator/CalculatedStints/calculatedStints.js","Components/Calculator/CalculatedStrategies/calculatedStrategies.js","Components/Calculator/Calculator.js","Models/TyreType.js","Components/FormSetup/Compounds/Compound.js","Components/FormSetup/RaceData/raceData.js","Components/FormSetup/FormSetup.js","Components/Layout/Layout.js","App.js","index.js"],"names":["module","exports","CalculatedStint","tyreName","boxlap","weigth","fuel","compound","stintLenght","this","TyreName","BoxLap","Weight","Fuel","Compound","StintLength","RaceStrategy","Stints","WeightFactor","strategyWeight","totalWeight","forEach","stint","weight","calculatedStints","props","highlightColor","push","Styles","row","parseInt","minLaps","warning","safe","className","CalculatedStints","Details","join","calculatedStrategies","renderStints","strategy","map","index","CalculatedStrategy","stintrow","Calculator","definedCompounds","raceStats","usedCompounds","currentStrategy","raceStrategies","state","render","calculateRaceStrategies","length","calculateStrategyStints","setState","currentLap","raceLaps","remainingLaps","optimalStintLaps","Math","ceil","fuelLaps","toFixed","findOptimalCompound","stintLaps","getStintLaps","stintFuel","getStintFuel","tyreType","name","speedFactor","updateCompoundUsage","previousStint","calculatedFuel","deltaFuel","candidates","compoundMinLaps","element","canCompoundBeUsed","sort","a","b","some","compoundId","id","used","usedCompound","find","el","slice","findIndex","available","renderCalculatedStints","Component","TyreType","tyreNames","tyreTypes","setCompound","maxLaps","isSet","initializeTyreTypes","returnTyres","i","getTyreOptions","tyre","value","setMaxLapsHandler","e","preventDefault","currentTyre","target","setMinLapsHandler","setTyreTypeHandler","setAvailableCompoundsHandler","styles","onChange","event","formRow","type","placeholder","onClick","disabled","RaceData","ev","FormSetup","fuelLapsHandler","currentStats","raceLapsHandler","deltaFuelHandler","addCompoundHandler","currCompounds","existingCompound","elementIndex","indexOf","splice","console","log","createCompoundHandler","Date","now","renderCompounds","style","CompoundRow","calculateClick","Layout","calculateClickHandler","raceData","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a481e9c7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CalculatedStints\":\"calculatedStints_CalculatedStints__2pRRF\",\"Compound\":\"calculatedStints_Compound__3uBrb\",\"Details\":\"calculatedStints_Details__3TSge\",\"row\":\"calculatedStints_row__rfLct\",\"warning\":\"calculatedStints_warning__HaADc\",\"safe\":\"calculatedStints_safe__94Jst\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Compound\":\"Compound_Compound___92da\",\"formRow\":\"Compound_formRow__yDRrC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RaceData\":\"raceData_RaceData__2LpJn\",\"formRow\":\"raceData_formRow__1kpYl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CalculatedStrategy\":\"calculatedStrategies_CalculatedStrategy__37J7R\",\"stintrow\":\"calculatedStrategies_stintrow__1zeTd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CompoundRow\":\"FormSetup_CompoundRow__1OeAi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__9siPd\"};","class CalculatedStint{\n    constructor(tyreName,boxlap,weigth,fuel,compound,stintLenght)\n    {\n        this.TyreName = tyreName;\n        this.BoxLap = boxlap;\n        this.Weight = weigth;\n        this.Fuel = fuel;\n        this.Compound = compound;\n        this.StintLength = stintLenght\n    }\n}\n\nexport default CalculatedStint;","class RaceStrategy{\n\n    Stints = [];\n    WeightFactor = 1;\n    \n    strategyWeight = () => \n    {\n\n        let totalWeight = 0;\n        this.Stints.forEach((stint) => \n        {\n            totalWeight += stint.weight;\n        })\n\n        return totalWeight * this.WeightFactor;\n    }\n}\n\nexport default RaceStrategy;","import React from 'react';\nimport Styles from './calculatedStints.module.css';\n\nconst calculatedStints = (props) => {\n\n    const highlightColor = [];\n\n    highlightColor.push(Styles.row);\n    \n    if (parseInt(props.stint.Compound.minLaps - props.stint.StintLength) === 0)\n    {\n        highlightColor.push(Styles.warning);\n    }\n    else\n    {\n        highlightColor.push(Styles.safe);\n    }\n\n    return(\n        <div className={Styles.CalculatedStints}>\n            <div className={Styles.Compound}>{props.stint.TyreName}</div>\n            <div className={Styles.Details}>\n                <div className={Styles.row}>\n                    <p>Box Lap:</p> \n                    <span>{props.stint.BoxLap}</span>\n                </div>\n                <div className={Styles.row}>\n                    <p>Fuel: </p>\n                    <span>{props.stint.Fuel}</span>\n                </div>\n                <div className={highlightColor.join(' ')}>\n                    <p>Diff. Tyre Laps: </p>\n                    <span>{props.stint.Compound.minLaps - props.stint.StintLength}</span>\n                </div>\n                <div className={Styles.row}>\n                    <p>Stint Laps:</p>\n                    <span>{props.stint.StintLength}</span>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default calculatedStints;","import React from 'react';\nimport CalculatedStints from '../CalculatedStints/calculatedStints';\nimport Styles from './calculatedStrategies.module.css';\n\nconst calculatedStrategies = (props) => \n{\n    const renderStints = props.strategy.Stints.map((stint,index) => \n        {\n            return <CalculatedStints key={index}\n                stint = {stint}\n                />\n        });\n    \n\n    return (\n        <div className={Styles.CalculatedStrategy} >\n            <h2>Calculated Strategy: </h2>\n            <div className={Styles.stintrow}>\n                {renderStints}\n            </div>\n        </div>\n    );\n}\n\nexport default calculatedStrategies;","import React,{Component} from 'react';\nimport CalculatedStint from '../../Models/CalculatedStint';\nimport RaceStrategy from '../../Models/RaceStrategy';\nimport CalculatedStrategies from './CalculatedStrategies/calculatedStrategies';\n\n\nclass Calculator extends Component \n{\n    definedCompounds = null;\n    raceStats = parseInt(this.props.raceStats);\n    usedCompounds = [];\n    currentStrategy = null;\n    raceStrategies = [];\n\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {render:false};\n    }\n\n    componentDidUpdate()\n    {\n        if (this.definedCompounds !== this.props.definedCompounds)\n        {\n            this.raceStrategies = [];\n            this.definedCompounds = this.props.definedCompounds;\n            this.raceStats = this.props.raceStats;\n            this.calculateRaceStrategies();\n        }\n    }\n\n    calculateRaceStrategies() \n    {\n        if (this.definedCompounds.length > 0)\n        {\n            //while(this.compoundsAvailable())\n            //{\n                let strategy = this.calculateStrategyStints(new RaceStrategy());\n                this.raceStrategies.push(strategy);\n                this.setState({render:true});\n\n            //}\n        }\n    }\n\n    calculateStrategyStints(strategy) \n    {\n        \n        let currentLap = 0;\n\n        while (currentLap < this.raceStats.raceLaps)\n        {\n            let remainingLaps = (parseInt(this.raceStats.raceLaps) - currentLap);\n            let remainingStints = Math.ceil((remainingLaps) / this.raceStats.fuelLaps);\n            let optimalStintLaps = (remainingLaps / remainingStints).toFixed(2);\n            \n\n            let compound = this.findOptimalCompound(optimalStintLaps,this.raceStats.fuelLaps);\n            if (compound){\n\n                let stintLaps = this.getStintLaps(currentLap,compound);\n                let stintFuel = this.getStintFuel(strategy,stintLaps);\n\n                strategy.Stints.push(\n                    new CalculatedStint(compound.tyreType.name,\n                            currentLap,\n                            compound.speedFactor,\n                            stintFuel,\n                            compound,\n                            stintLaps\n                            )\n                );\n\n                currentLap = currentLap + (compound.minLaps > this.raceStats.fuelLaps?this.raceStats.fuelLaps:compound.minLaps);\n                this.updateCompoundUsage(compound);\n            }\n            else{\n                //No compounds found\n                currentLap = this.raceStats.raceLaps;\n            }\n        }\n\n        return strategy;\n    }\n\n    getStintLaps(currentLap,compound)\n    {\n        if ((this.raceStats.raceLaps - currentLap) > compound.minLaps)\n        {\n            return (compound.minLaps > this.raceStats.fuelLaps?this.raceStats.fuelLaps:compound.minLaps);\n        }\n\n        return (this.raceStats.raceLaps - currentLap);\n    }\n\n    getStintFuel(strategy,stintLaps)\n    {\n        if (strategy.Stints.length === 0)\n        {\n            //First stint we go full fuel. \n            return this.raceStats.fuelLaps;\n        }\n        else\n        {\n            let previousStint = strategy.Stints[strategy.Stints.length - 1];\n            let remainingFuel = previousStint.Fuel - previousStint.StintLength;\n            let calculatedFuel = stintLaps - remainingFuel + this.raceStats.deltaFuel;\n\n            return (calculatedFuel>this.raceStats.fuelLaps)? this.raceStats.fuelLaps : calculatedFuel;\n        }\n    }\n\n    findOptimalCompound(optimalStintLaps,fuelLaps) \n    {\n        //Find optimal compound:\n            /*\n                Rules are: \n                    - Available Compound MinLaps >= FuelLaps || optimalStintLaps check if optimalStintLaps > Fuel Laps\n                    - For the given candidates, the one with smallest speedfactor.\n                    - If no candidates the compound with smallest speedfactor. \n            */\n\n        let candidates = [];\n        let compoundMinLaps = (optimalStintLaps > fuelLaps)? fuelLaps:optimalStintLaps;\n\n        this.definedCompounds.forEach(element => {\n            if (this.canCompoundBeUsed(element))\n            {\n                if(element.minLaps >= compoundMinLaps)\n                {\n                    candidates.push(element);\n                }\n            }\n        });\n\n        if (candidates.length === 0)\n        {\n            this.definedCompounds.forEach(element => {\n                if (this.canCompoundBeUsed(element))\n                {\n                    candidates.push(element);\n                }\n            }); \n\n        }\n        return candidates.sort((a,b) => a.tyreType.speedFactor - b.tyreType.speedFactor)[0];\n        \n    }\n\n    compoundsAvailable()\n    {\n        return this.definedCompounds.some((compound) => this.canCompoundBeUsed(compound));\n    }\n\n    updateCompoundUsage(compound)\n    {\n        if (this.usedCompounds.length === 0)\n        {\n            this.usedCompounds.push({\n                compoundId: compound.id,\n                used:1\n            });\n        }\n        else\n        {\n            let usedCompound = this.usedCompounds.find((el) => parseInt(el.compoundId) === parseInt(compound.id));\n            if (usedCompound)\n            {\n                usedCompound.used+=1;\n                \n                this.usedCompounds.slice(this.usedCompounds.findIndex((el)=> parseInt(el.compoundId) === parseInt(compound.id)),1,usedCompound);\n            }\n            else{\n\n                this.usedCompounds.push({\n                    compoundId: compound.id,\n                    used:1\n                });\n            }\n        }\n    }\n\n    canCompoundBeUsed(compound)\n    {\n        if (this.usedCompounds.length === 0)\n        {\n            return true;\n        }\n        else\n        {\n            let element = this.usedCompounds.find((el) => parseInt(el.compoundId) === parseInt(compound.id));\n\n            if (!element)\n            {\n                return true;\n            }\n            else\n            {\n                return element.used < compound.available;\n            }\n        }\n    }\n\n    renderCalculatedStints()\n    {\n        if (this.raceStrategies.length > 0)\n        {\n            return this.raceStrategies.map((strategy,index) => {\n                return <CalculatedStrategies \n                    key={index} \n                    strategy={strategy}\n                    />\n            })\n        }\n        else{\n            return <p>Provide data first.</p>;\n        }\n    }\n\n\n    render () {\n        return (this.renderCalculatedStints());\n    }\n}\n\nexport default Calculator;","class TyreType{\n    constructor(name,speedFactor)\n    {\n        this.name=name;\n        this.speedFactor = speedFactor;\n    }\n}\n\nexport default TyreType;","import React,{Component} from 'react';\nimport TyreType from '../../../Models/TyreType';\nimport styles from './Compound.module.css';\n\nclass Compound extends Component {\n    \n    tyreNames = ['Ultra-Soft','Super-Soft','Soft','Medium','Hard','Inter','Full-Wet'];\n\n    state = {\n        tyreTypes:[],\n        setCompound:{\n            id : this.props.id,\n            tyreType: \"\",\n            maxLaps: 0,\n            minLaps:0,\n            available:0\n        },\n        isSet:false\n    }\n\n    constructor(props)\n    {\n        super(props);\n        this.state.tyreTypes  =this.initializeTyreTypes();\n    }\n\n\n\n    initializeTyreTypes = () => \n    {\n        let returnTyres = [];\n        for(let i=0;i<this.tyreNames.length;i++)\n        {\n            returnTyres.push(\n                new TyreType(this.tyreNames[i],i)\n            );\n        }\n        return returnTyres;\n    }\n\n    getTyreOptions = () => \n    {\n        return this.state.tyreTypes.map(tyre => \n            {\n                return <option key={tyre.name} value={tyre.name}>{tyre.name}</option>\n            });\n    }\n\n    setMaxLapsHandler = (e) => \n    {\n        e.preventDefault();\n        let currentTyre = this.state.setCompound;\n        currentTyre.maxLaps = parseInt(e.target.value);\n        this.setState({setCompound: currentTyre});\n        this.setState({isSet:true});\n    }\n\n    setMinLapsHandler = (e) =>{\n        e.preventDefault();\n        let currentTyre = this.state.setCompound;\n        currentTyre.minLaps = parseInt(e.target.value);\n        this.setState({setCompound: currentTyre});\n        this.setState({isSet:true});\n    }\n\n    setTyreTypeHandler = (e) => {\n        e.preventDefault();\n        let currentTyre = this.state.setCompound;\n        currentTyre.tyreType = this.state.tyreTypes.find((el) => {return el.name === e.target.value});\n        this.setState({setCompound: currentTyre});\n        this.setState({isSet:true});\n    }\n\n    setAvailableCompoundsHandler = (e) => \n    {\n        e.preventDefault();\n        let currentTyre = this.state.setCompound;\n        currentTyre.available = parseInt(e.target.value);\n        this.setState({setCompound: currentTyre});\n        this.setState({isSet:true});\n    }\n\n    render () {\n        return (\n            <div className={styles.Compound}>\n                \n                <select name=\"compounds\" onChange={(event) => this.setTyreTypeHandler(event)}>\n                    {this.getTyreOptions()}\n                </select>\n                \n                <div className={styles.formRow}>\n                    <label>Max Laps:</label>\n                    <input type=\"text\" placeholder=\"MaxLaps\" onChange={(event) => this.setMaxLapsHandler(event)} />\n                </div>\n                <div className={styles.formRow}>\n                    <label>Min Laps:</label>\n                    <input type=\"text\" placeholder=\"MinLaps\" onChange={(event) => this.setMinLapsHandler(event)} />\n                </div>\n                <div className={styles.formRow}>\n                    <label>Available:</label>\n                    <input type=\"text\" placeholder=\"Available\" onChange={(event) => this.setAvailableCompoundsHandler(event)} />\n                </div>\n                {\n                    (this.state.isSet) ?\n                        <button onClick={() => {\n                            this.setState({ isSet: false })\n                            this.props.setCompound(this.state.setCompound);\n                        }}\n                        >Set</button>\n                        :\n                        <button disabled>Set</button>\n\n                }\n                <button>Remove</button>\n            </div>\n\n        );\n    }\n\n}\n\nexport default Compound;","import React from 'react';\nimport styles from './raceData.module.css';\n\nconst RaceData = (props) => \n(\n    <div className={styles.RaceData}>\n        <div className={styles.formRow}>\n            <label>Max Fuel Laps:</label>\n            <input type=\"text\" placeholder=\"Max Fuel Laps\" onChange={(ev) => props.fuelLaps(ev)}/>\n        </div>\n        <div className={styles.formRow}>\n            <label>Race Laps:</label>\n            <input type=\"text\" placeholder=\"Race Laps\" onChange={(ev) => props.raceLaps(ev)}/>\n        </div>\n        <div className={styles.formRow}>\n            <label>Delta Fuel laps:</label>\n            <input type=\"text\" placeholder=\"Delta Fuel Laps\" onChange={(ev) => props.deltaFuel(ev)}/>\n        </div>\n    </div>\n);\n\nexport default RaceData;","import React,{Component} from 'react';\nimport Compound from './Compounds/Compound';\nimport RaceData from './RaceData/raceData';\nimport style from './FormSetup.module.css';\n\nclass FormSetup extends Component {\n\n    state = {\n        raceStats: {\n            fuelLaps:0,\n            raceLaps:0,\n            deltaFuel:0\n        },\n        definedCompounds: []\n    }\n\n    fuelLapsHandler = (e) => \n    {\n        e.preventDefault();\n\n        let currentStats = this.state.raceStats;\n        currentStats.fuelLaps = parseInt(e.target.value);\n\n        this.setState({raceStats : currentStats});\n    }\n\n    raceLapsHandler = (e) => \n    {\n        e.preventDefault();\n        let currentStats = this.state.raceStats;\n        currentStats.raceLaps = parseInt(e.target.value);\n\n        this.setState({raceStats : currentStats});\n    }\n\n    deltaFuelHandler = (e) => \n    {\n        e.preventDefault();\n        let currentStats = this.state.raceStats;\n        currentStats.deltaFuel = parseInt(e.target.value);\n\n        this.setState({raceStats : currentStats});\n    }\n\n    addCompoundHandler = (compound) => \n    {\n        let currCompounds = this.state.definedCompounds;\n\n        let existingCompound = currCompounds.find((el) => {return el.id === compound.id});\n\n        if (existingCompound)\n        {\n            let elementIndex = currCompounds.indexOf(existingCompound);\n            currCompounds.splice(elementIndex,1,compound);\n            this.setState({definedCompounds:currCompounds});\n        }\n        else{\n            console.log(\"element not found: \" + compound);\n        }\n        \n    }\n\n    createCompoundHandler = () => \n    {\n        let currCompounds = this.state.definedCompounds;\n        currCompounds.push({\n            id: Date.now(),\n            tyreType: '',\n            maxLaps:0,\n            minLaps:0\n        });\n\n        this.setState({definedCompounds:currCompounds})\n    }\n\n    renderCompounds= () => \n    {\n        return this.state.definedCompounds.map((compound) => {\n            return <Compound key={compound.id} id={compound.id} setCompound={this.addCompoundHandler}/>\n        });\n    }\n\n    render (){\n        return (\n            <div>\n                <RaceData \n                    fuelLaps = {this.fuelLapsHandler}\n                    raceLaps = {this.raceLapsHandler}\n                    deltaFuel = {this.deltaFuelHandler}/>\n\n                <button onClick={this.createCompoundHandler}>Add Compound</button>\n                <div className={style.CompoundRow}>\n                    {this.renderCompounds()}\n                </div>\n                <button onClick={(event)=> this.props.calculateClick(event,this.state) }>Calculate</button>\n            </div>\n        );\n    }\n\n}\n\nexport default FormSetup;","import React, {Component} from 'react';\nimport Calculator from '../Calculator/Calculator';\nimport FormSetup from '../FormSetup/FormSetup';\nimport styles from './Layout.module.css';\n\nclass Layout extends Component{\n    state = {\n        raceStats:{},\n        definedCompounds:[]\n    }\n\n    calculateClickHandler = (ev,raceData) => \n    {\n        ev.preventDefault();\n        this.setState({raceStats: raceData.raceStats, definedCompounds:raceData.definedCompounds});\n    }\n\n    render (){\n        return(\n            <div className={styles.Layout}>\n                <h1>Strategy Builder</h1>\n                <FormSetup calculateClick = {this.calculateClickHandler}/>\n                <Calculator\n                    raceStats = {this.state.raceStats}\n                    definedCompounds = {this.state.definedCompounds}/>\n            </div>\n        );\n    };\n}\n\nexport default Layout;","import './App.css';\nimport Layout from './Components/Layout/Layout';\n\nfunction App() {\n  return (\n    <Layout/>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}