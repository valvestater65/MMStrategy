{"version":3,"sources":["Models/CalculatedStint.js","Models/RaceStrategy.js","Components/Calculator/CalculatedStints/calculatedStints.js","Components/Calculator/CalculatedStrategies/calculatedStrategies.js","Components/Calculator/Calculator.js","Models/TyreType.js","Components/FormSetup/Compounds/Compound.js","Components/FormSetup/RaceData/raceData.js","Components/FormSetup/FormSetup.js","Components/Layout/Layout.js","App.js","index.js","Components/Calculator/CalculatedStints/calculatedStints.module.css"],"names":["CalculatedStint","tyreName","laps","weigth","fuel","this","TyreName","Laps","Weight","Fuel","RaceStrategy","Stints","WeightFactor","strategyWeight","totalWeight","forEach","stint","weight","calculatedStints","props","className","Styles","CalculatedStints","tyre","calculatedStrategies","renderStints","strategy","map","Calculator","definedCompounds","raceStats","parseInt","state","raceStrategies","usedCompounds","currentStrategy","prevProps","calculateRaceStrategies","length","calculateStrategyStints","push","setState","currentLap","raceLaps","remainingLaps","remainingStints","Math","ceil","fuelLaps","optimalStintLaps","toFixed","console","log","compound","findOptimalCompound","tyreType","name","speedFactor","minLaps","updateCompoundUsage","candidates","compoundMinLaps","element","canCompoundBeUsed","sort","a","b","some","compoundId","id","used","usedCompound","find","el","slice","findIndex","available","Date","now","renderCalculatedStints","Component","TyreType","Compound","tyreNames","tyreTypes","setCompound","maxLaps","isSet","initializeTyreTypes","returnTyres","i","getTyreOptions","value","setMaxLapsHandler","e","preventDefault","currentTyre","target","setMinLapsHandler","setTyreTypeHandler","setAvailableCompoundsHandler","onChange","event","type","placeholder","onClick","disabled","RaceData","ev","FormSetup","fuelLapsHandler","currentStats","raceLapsHandler","addCompoundHandler","currCompounds","existingCompound","elementIndex","indexOf","splice","createCompoundHandler","renderCompounds","calculateClick","Layout","calculateClickHandler","raceData","App","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.eed0e0ec.chunk.js","sourcesContent":["class CalculatedStint{\n    constructor(tyreName,laps,weigth,fuel)\n    {\n        this.TyreName = tyreName;\n        this.Laps = laps;\n        this.Weight = weigth;\n        this.Fuel = fuel;\n    }\n}\n\nexport default CalculatedStint;","class RaceStrategy{\n\n    Stints = [];\n    WeightFactor = 1;\n    \n    strategyWeight = () => \n    {\n\n        let totalWeight = 0;\n        this.Stints.forEach((stint) => \n        {\n            totalWeight += stint.weight;\n        })\n\n        return totalWeight * this.WeightFactor;\n    }\n}\n\nexport default RaceStrategy;","import React from 'react';\nimport Styles from './calculatedStints.module.css';\n\nconst calculatedStints = (props) => (\n    <div className={Styles.CalculatedStints}>\n        <p>Tyre: {props.tyre}</p>\n        <p>Box Lap: {props.laps}</p>\n        <p>Fuel: {props.fuel}</p>\n    </div>\n);\n\nexport default calculatedStints;","import React from 'react';\nimport CalculatedStints from '../CalculatedStints/calculatedStints';\n\nconst calculatedStrategies = (props) => \n{\n    const renderStints = props.strategy.Stints.map((stint) => \n        {\n            return <CalculatedStints key={stint.TyreName+\"_\"+stint.Laps}\n                tyre={stint.TyreName}\n                laps={stint.Laps}\n                fuel={stint.Fuel} />\n        });\n    \n\n    return (\n        <div>\n            <h2>Calculated Strategy: </h2>\n            {renderStints}\n        </div>\n    );\n}\n\nexport default calculatedStrategies;","import React,{Component} from 'react';\nimport CalculatedStint from '../../Models/CalculatedStint';\nimport RaceStrategy from '../../Models/RaceStrategy';\nimport CalculatedStrategies from './CalculatedStrategies/calculatedStrategies';\n\n\nclass Calculator extends Component \n{\n    definedCompounds = this.props.definedCompounds;\n    raceStats = parseInt(this.props.raceStats);\n\n    state = {\n        raceStrategies: []\n    }\n\n    usedCompounds = [];\n    currentStrategy = null;\n\n    componentDidUpdate(prevProps)\n    {\n        if (this.props.definedCompounds !== prevProps.definedCompounds)\n        {\n            this.definedCompounds = this.props.definedCompounds;\n            this.raceStats = this.props.raceStats;\n            this.calculateRaceStrategies();\n        }\n    }\n\n    calculateRaceStrategies() \n    {\n        if (this.definedCompounds.length > 0)\n        {\n            //while(this.compoundsAvailable())\n            //{\n                let strategy = this.calculateStrategyStints(new RaceStrategy());\n                let calculatedStrategies = this.state.raceStrategies;\n                calculatedStrategies.push(strategy);\n                this.setState({raceStrategies:calculatedStrategies});\n            //}\n        }\n    }\n\n    calculateStrategyStints(strategy) \n    {\n        \n        let currentLap = 0;\n\n        while (currentLap < this.raceStats.raceLaps)\n        {\n            let remainingLaps = (parseInt(this.raceStats.raceLaps) - currentLap);\n            let remainingStints = Math.ceil((remainingLaps) / this.raceStats.fuelLaps);\n            let optimalStintLaps = (remainingLaps / remainingStints).toFixed(2);\n            console.log('remainingLaps: ' + remainingLaps);\n            console.log('remainingStints: ' + remainingStints);\n            console.log('optimalStintLaps: ' + optimalStintLaps);\n\n            let compound = this.findOptimalCompound(optimalStintLaps,this.raceStats.fuelLaps);\n            if (compound){\n\n                console.log('compound determined: ' + compound.tyreType.name);\n                strategy.Stints.push(\n                    new CalculatedStint(compound.tyreType.name,\n                            currentLap,\n                            compound.speedFactor,\n                            10)\n                );\n\n                currentLap = currentLap + (compound.minLaps > this.raceStats.fuelLaps?this.raceStats.fuelLaps:compound.minLaps);\n                this.updateCompoundUsage(compound);\n                console.log('used compounds');\n                console.log(this.usedCompounds);\n            }\n            else{\n                //No compounds found\n                currentLap = this.raceStats.raceLaps;\n            }\n        }\n\n        return strategy;\n    }\n\n    findOptimalCompound(optimalStintLaps,fuelLaps) \n    {\n        //Find optimal compound:\n            /*\n                Rules are: \n                    - Available Compound MinLaps >= FuelLaps || optimalStintLaps check if optimalStintLaps > Fuel Laps\n                    - For the given candidates, the one with smallest speedfactor.\n                    - If no candidates the compound with smallest speedfactor. \n            */\n\n        let candidates = [];\n        let compoundMinLaps = (optimalStintLaps > fuelLaps)? fuelLaps:optimalStintLaps;\n        console.log('compoundMinLaps:' + compoundMinLaps);\n\n        this.definedCompounds.forEach(element => {\n            if (this.canCompoundBeUsed(element))\n            {\n                if(element.minLaps >= compoundMinLaps)\n                {\n                    candidates.push(element);\n                }\n            }\n        });\n\n        if (candidates.length === 0)\n        {\n            this.definedCompounds.forEach(element => {\n                if (this.canCompoundBeUsed(element))\n                {\n                    candidates.push(element);\n                }\n            }); \n\n        }\n        return candidates.sort((a,b) => a.tyreType.speedFactor - b.tyreType.speedFactor)[0];\n        \n    }\n\n    compoundsAvailable()\n    {\n        return this.definedCompounds.some((compound) => this.canCompoundBeUsed(compound));\n    }\n\n    updateCompoundUsage(compound)\n    {\n        if (this.usedCompounds.length === 0)\n        {\n            this.usedCompounds.push({\n                compoundId: compound.id,\n                used:1\n            });\n        }\n        else\n        {\n            let usedCompound = this.usedCompounds.find((el) => parseInt(el.compoundId) === parseInt(compound.id));\n            if (usedCompound)\n            {\n                usedCompound.used+=1;\n                \n                this.usedCompounds.slice(this.usedCompounds.findIndex((el)=> parseInt(el.compoundId) === parseInt(compound.id)),1,usedCompound);\n            }\n            else{\n\n                this.usedCompounds.push({\n                    compoundId: compound.id,\n                    used:1\n                });\n            }\n        }\n    }\n\n    canCompoundBeUsed(compound)\n    {\n        if (this.usedCompounds.length === 0)\n        {\n            return true;\n        }\n        else\n        {\n            let element = this.usedCompounds.find((el) => parseInt(el.compoundId) === parseInt(compound.id));\n\n            if (!element)\n            {\n                return true;\n            }\n            else\n            {\n                return element.used < compound.available;\n            }\n        }\n    }\n\n    renderCalculatedStints()\n    {\n        if (this.state.raceStrategies.length > 0)\n        {\n            return this.state.raceStrategies.map((strategy) => {\n                return <CalculatedStrategies key={Date.now} strategy={strategy} />\n            })\n        }\n        else{\n            return <p>provide data</p>;\n        }\n    }\n\n\n    render () {\n        return (this.renderCalculatedStints());\n    }\n}\n\nexport default Calculator;","class TyreType{\n    constructor(name,speedFactor)\n    {\n        this.name=name;\n        this.speedFactor = speedFactor;\n    }\n}\n\nexport default TyreType;","import React,{Component} from 'react';\nimport TyreType from '../../../Models/TyreType';\n\nclass Compound extends Component {\n    \n    tyreNames = ['Ultra-Soft','Super-Soft','Soft','Medium','Hard','Inter','Full-Wet'];\n\n    state = {\n        tyreTypes:[],\n        setCompound:{\n            id : this.props.id,\n            tyreType: \"\",\n            maxLaps: 0,\n            minLaps:0,\n            available:0\n        },\n        isSet:false\n    }\n\n    constructor(props)\n    {\n        super(props);\n        this.state.tyreTypes  =this.initializeTyreTypes();\n    }\n\n\n\n    initializeTyreTypes = () => \n    {\n        let returnTyres = [];\n        for(let i=0;i<this.tyreNames.length;i++)\n        {\n            returnTyres.push(\n                new TyreType(this.tyreNames[i],i)\n            );\n        }\n        return returnTyres;\n    }\n\n    getTyreOptions = () => \n    {\n        return this.state.tyreTypes.map(tyre => \n            {\n                return <option key={tyre.name} value={tyre.name}>{tyre.name}</option>\n            });\n    }\n\n    setMaxLapsHandler = (e) => \n    {\n        e.preventDefault();\n        let currentTyre = this.state.setCompound;\n        currentTyre.maxLaps = parseInt(e.target.value);\n        this.setState({setCompound: currentTyre});\n        this.setState({isSet:true});\n    }\n\n    setMinLapsHandler = (e) =>{\n        e.preventDefault();\n        let currentTyre = this.state.setCompound;\n        currentTyre.minLaps = parseInt(e.target.value);\n        this.setState({setCompound: currentTyre});\n        this.setState({isSet:true});\n    }\n\n    setTyreTypeHandler = (e) => {\n        e.preventDefault();\n        let currentTyre = this.state.setCompound;\n        currentTyre.tyreType = this.state.tyreTypes.find((el) => {return el.name === e.target.value});\n        this.setState({setCompound: currentTyre});\n        this.setState({isSet:true});\n    }\n\n    setAvailableCompoundsHandler = (e) => \n    {\n        e.preventDefault();\n        let currentTyre = this.state.setCompound;\n        currentTyre.available = parseInt(e.target.value);\n        this.setState({setCompound: currentTyre});\n        this.setState({isSet:true});\n    }\n\n    render () {\n        return (\n            <div>\n                <select name=\"compounds\" onChange={(event) => this.setTyreTypeHandler(event)}>\n                    {this.getTyreOptions()}\n                </select>\n                <label>Max Laps:</label>\n                <input type=\"text\" placeholder=\"MaxLaps\" onChange={(event) => this.setMaxLapsHandler(event)} /> \n                <label>Min Laps:</label>\n                <input type=\"text\" placeholder=\"MinLaps\" onChange={(event) => this.setMinLapsHandler(event)}/> \n                <label>Available:</label>\n                <input type=\"text\" placeholder=\"Available\" onChange={(event) => this.setAvailableCompoundsHandler(event)}/>\n                {\n                (this.state.isSet)?\n                    <button onClick={() => {\n                        this.setState({isSet:false})\n                        this.props.setCompound(this.state.setCompound);}}\n                        >Set</button>\n                        :\n                        <button disabled>Set</button>\n                \n                }\n                <button>Remove</button>\n            </div>\n\n        );\n    }\n\n}\n\nexport default Compound;","import React from 'react';\n\nconst RaceData = (props) => \n(\n    <div>\n        <input type=\"text\" placeholder=\"Max Fuel Laps\" onChange={(ev) => props.fuelLaps(ev)}/>\n        <input type=\"text\" placeholder=\"Race Laps\" onChange={(ev) => props.raceLaps(ev)}/>\n    </div>\n);\n\nexport default RaceData;","import React,{Component} from 'react';\nimport Compound from './Compounds/Compound';\nimport RaceData from './RaceData/raceData';\n\nclass FormSetup extends Component {\n\n    state = {\n        raceStats: {\n            fuelLaps:0,\n            raceLaps:0\n        },\n        definedCompounds: []\n    }\n\n    fuelLapsHandler = (e) => \n    {\n        e.preventDefault();\n\n        let currentStats = this.state.raceStats;\n        currentStats.fuelLaps = parseInt(e.target.value);\n\n        this.setState({raceStats : currentStats});\n    }\n\n    raceLapsHandler = (e) => \n    {\n        e.preventDefault();\n        let currentStats = this.state.raceStats;\n        currentStats.raceLaps = parseInt(e.target.value);\n\n        this.setState({raceStats : currentStats});\n    }\n\n    addCompoundHandler = (compound) => \n    {\n        let currCompounds = this.state.definedCompounds;\n\n        let existingCompound = currCompounds.find((el) => {return el.id === compound.id});\n\n        if (existingCompound)\n        {\n            let elementIndex = currCompounds.indexOf(existingCompound);\n            currCompounds.splice(elementIndex,1,compound);\n            this.setState({definedCompounds:currCompounds});\n        }\n        else{\n            console.log(\"element not found: \" + compound);\n        }\n        \n    }\n\n    createCompoundHandler = () => \n    {\n        let currCompounds = this.state.definedCompounds;\n        currCompounds.push({\n            id: Date.now(),\n            tyreType: '',\n            maxLaps:0,\n            minLaps:0\n        });\n\n        this.setState({definedCompounds:currCompounds})\n    }\n\n    renderCompounds= () => \n    {\n        return this.state.definedCompounds.map((compound) => {\n            return <Compound key={compound.id} id={compound.id} setCompound={this.addCompoundHandler}/>\n        });\n    }\n\n    render (){\n        return (\n            <div>\n                <RaceData \n                    fuelLaps = {this.fuelLapsHandler}\n                    raceLaps = {this.raceLapsHandler}/>\n\n                <button onClick={this.createCompoundHandler}>Add Compound</button>\n                {this.renderCompounds()}\n                <button onClick={(event)=> this.props.calculateClick(event,this.state) }>Calculate</button>\n            </div>\n        );\n    }\n\n}\n\nexport default FormSetup;","import React, {Component} from 'react';\nimport Calculator from '../Calculator/Calculator';\nimport FormSetup from '../FormSetup/FormSetup';\n\nclass Layout extends Component{\n    state = {\n        raceStats:{},\n        definedCompounds:[]\n    }\n\n    calculateClickHandler = (ev,raceData) => \n    {\n        ev.preventDefault();\n        this.setState({raceStats: raceData.raceStats, definedCompounds:raceData.definedCompounds});\n    }\n\n    render (){\n        return(\n            <div>\n                <h1>Strategy Builder</h1>\n                <FormSetup calculateClick = {this.calculateClickHandler}/>\n                <Calculator\n                    raceStats = {this.state.raceStats}\n                    definedCompounds = {this.state.definedCompounds}/>\n            </div>\n        );\n    };\n}\n\nexport default Layout;","import './App.css';\nimport Layout from './Components/Layout/Layout';\n\nfunction App() {\n  return (\n    <Layout/>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CalculatedStints\":\"calculatedStints_CalculatedStints__2pRRF\"};"],"sourceRoot":""}